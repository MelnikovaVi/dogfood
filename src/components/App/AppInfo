!про события прочитать в библиотеке к реакту в SyntheticEvent

<!-- const App = () => {
	return (
       <>
              <Header/>
              <main className="content container">

Обработчик события вешается через on
                <button className="btn" onMouseOver={()=> console.log("Нажали")}>Нажми</button>
                     <Sort/>
                     <div className="content__cards">
                     <SearchInfo/>
                     <CardList/>
                     </div>
              </main>
              <Footer/>
       </>
	);
}; -->

export default App;

_______________________________________________
Хуки - часть кода, который можно переиспользовать, позволяют хранить состояние, выполнять side эффекты и т.п.
Хук по сути функция, возвращающая состояние.
Основные используемые хуки:

1) useState - позволяет задавать и управлять состоянием компонента. Изменение состояния (ререндер при изменении пропса или удалении элемента), которое возвращает это хук заставляет элемент перерисоваться
Справа от = функция, которой можно задать начальное состояние, эта функция возвращает массив с двумя элементами
const [myState, setMyState] = useState(false)

 useState(false) - начальное состояие
myState - переменная состояния, при обновлении состояния, новое попадает сюда же. Состояние myState напрямую изменять нельзя, то есть жестко присваивать значение, для изменения используют setMyState.
setMyState - функция изменяющая состояние переменной myState.

Можно использовать сколько угодно useState.

Функция обновления должна возвращать полностью новый обЪект, а не измененую часть.

Ленивая инициализация - начальное состояние расчитывается на месте
const [myState, setMyState] = useState(() => {
       вычисления
       return true;
})

const App = () => {
       const [count, setCount] = useState(5)
       console.log(count, setCount);
       
       
       const handleMouseOver = () => {
              console.log('Click')
              setCount(count => count+1) // здесь передача через коллбэк
       }
              return (
              <>
                     <Header/>
                     <main className="content container">
                     <button className="btn" onMouseOver={handleMouseOver}>Нажми</button>
                     <div className="result">{count}</div>
                            <Sort/>
                            <div className="content__cards">
*****************************************************************************************************

2) useEffect - позволяет выполнять побочные эффекты после рендера компонентов. В хук useEffect можно обращаться к ДОМ элементам, потому что он вызывает функцию которую в него передали после монтирования компонента

Частные случаи с массивом зависимостей
если функцию, переданную в useEffect хотим вызвать один раз то передаем пустой массив в конце

useEffect(() => {
       делаем эффект
}, [])

Если должен выполнять при любом рендере то ничего не передаем
useEffect(() => {
       делаем эффект
})

Выполнить 1 раз при размонтировании (unmount) компонента
useEffect(() => {
       делаем эффект
       return function cleanup() {
              выполнить 1 раз при unmount
       }
}, [])

Выполнить если значение counter изменилось
useEffect(() => {
       делаем эффект
}, [counter])
******************************************************************************************************

3) useContext

и дополнительные:
useReducer
useCallback
useMemo
useRef

Редко используемые:
useLayoutEffect
useImperativeHandle
useDebugValue